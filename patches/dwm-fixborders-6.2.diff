From 1529909466206016f2101457bbf37c67195714c8 Mon Sep 17 00:00:00 2001
From: Jakub Leszczak <szatan@gecc.xyz>
Date: Fri, 22 Nov 2019 10:46:53 +0800
Subject: [PATCH] Fix transparent borders

When terminal has transparency then its borders also become transparent.
Fix it by removing transparency from any pixels drawn.
---
<<<<<<<
=======
static const char selbgcolor[]      = "#005577";
static const char selfgcolor[]      = "#eeeeee";
static const unsigned int borderpx  = 1;        /* border pixel of windows */
static const unsigned int gappx     = 1;        /* gap pixel between windows */
static const unsigned int snap      = 32;       /* snap pixel */
static const Bool showbar           = True;     /* False means no bar */
static const Bool topbar            = True;     /* False means bottom bar */
>>>>>>>
 drw.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/drw.c b/drw.c
index 8fd1ca4..490a592 100644
--- a/drw.c
+++ b/drw.c
@@ -202,6 +202,8 @@ drw_clr_create(Drw *drw, Clr *dest, const char *clrname)
 	                       DefaultColormap(drw->dpy, drw->screen),
 	                       clrname, dest))
 		die("error, cannot allocate color '%s'", clrname);
+
+	dest->pixel |= 0xff << 24;
 }
 
 /* Wrapper to create color schemes. The caller has to call free(3) on the
-- 
2.26.2

<<<<<<<
=======
	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
	{ MODKEY,                       XK_space,  setlayout,      {0} },
	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
	{ MODKEY|ShiftMask,             XK_f,      togglefullscr,  {0} },
	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
	{ MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
>>>>>>>
<<<<<<<
=======
static void tile(Monitor *);
static void togglebar(const Arg *arg);
static void togglefloating(const Arg *arg);
static void togglefullscr(const Arg *arg);
static void toggletag(const Arg *arg);
static void toggleview(const Arg *arg);
static void unfocus(Client *c, int setfocus);
>>>>>>>
<<<<<<<
=======
	arrange(selmon);
}

void
togglefullscr(const Arg *arg)
{
  if(selmon->sel)
    setfullscreen(selmon->sel, !selmon->sel->isfullscreen);
}

void
<<<<<<<
=======
tile(Monitor *m) {
	unsigned int i, n, h, r, g = 0, mw, my, ty;
<<<<<<<
=======

void
tile(Monitor *m) {
	unsigned int i, n, h, r, g = 0, mw, my, ty;
<<<<<<<
>>>>>>>
=======
>>>>>>>
	Client *c;

	for(n = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), n++);
>>>>>>>
toggletag(const Arg *arg)
{
>>>>>>>
<<<<<<<
=======
		return;

	if(n > m->nmaster)
		mw = m->nmaster ? (m->ww - (g = gappx)) * m->mfact : 0;
	else
		mw = m->ww;
	for(i = my = ty = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++)
		if(i < m->nmaster) {
			r = MIN(n, m->nmaster) - i;
			h = (m->wh - my - gappx * (r - 1)) / r;
			resize(c, m->wx, m->wy + my, mw - (2*c->bw), h - (2*c->bw), False);
			my += HEIGHT(c) + gappx;
		}
		else {
<<<<<<<
=======
			r = n - i;
			h = (m->wh - ty - gappx * (r - 1)) / r;
			resize(c, m->wx + mw + g, m->wy + ty, m->ww - mw - g - (2*c->bw), h - (2*c->bw), False);
			ty += HEIGHT(c) + gappx;
		}
}

>>>>>>>
<<<<<<<
=======
			r = n - i;
			h = (m->wh - ty - gappx * (r - 1)) / r;
			resize(c, m->wx + mw + g, m->wy + ty, m->ww - mw - g - (2*c->bw), h - (2*c->bw), False);
			ty += HEIGHT(c) + gappx;
		}
}

>>>>>>>
			r = n - i;
			h = (m->wh - ty - gappx * (r - 1)) / r;
			resize(c, m->wx + mw + g, m->wy + ty, m->ww - mw - g - (2*c->bw), h - (2*c->bw), False);
			ty += HEIGHT(c) + gappx;
		}
}

>>>>>>>
